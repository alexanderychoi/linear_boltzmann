import numpy as np
import time
import constants as c
import utilities
import problem_parameters as pp
import matplotlib.pyplot as plt
import numpy.linalg
from scipy.sparse import linalg
import occupation_solver
import preprocessing


class gmres_counter(object):
    """A class object that can be called during GMRES to print stepwise iterative residual."""
    def __init__(self, disp=True):
        self._disp = disp
        self.niter = 0

    def __call__(self, rk=None):
        self.niter += 1
        if self._disp:
            print('iter %3i\trk = %s' % (self.niter, str(rk)))


def ng_ng(chi, matrix_sc, matrix_fd, df, field, freq):
    """Generalized minimal residual solver for calculating transient Gamma-Gamma autocorrelation using the full
    finite difference matrix.

    Parameters:
        chi (nparray): Solution for the steady distribution function in chi form.
        matrix_sc (memmap): Scattering matrix in simple linearization by default..
        matrix_fd (memmap): Finite difference matrix, generated by apply_centraldiff_matrix.
        df (dataframe): Electron DataFrame indexed by kpt containing the energy associated with each state in eV.
        field (dbl): Value of the electric field in V/m.
        freq (dbl): Frequency in GHz to be used for the transient solution
    Returns:
        g_next (nparray): Numpy array containing the (hopefully) converged iterative solution as g_chi.
        g_0 (nparray): Numpy array containing the RTA solution as g0_chi.
    """
    counter = gmres_counter()
    if pp.scmBool:
        scmfac = pp.scmVal
        print('Applying correction factor to the scattering matrix.')
    else:
        scmfac = 1
        print('Not applying correction factor to scattering matrix.')
    print('Starting transient Gamma-Gamma population autocorrelation solver for {:.3E} V/m and {:E} GHz'.format(field,freq))
    freq_matrix = np.diag(np.ones(len(df))*1j*10**9*2*np.pi*freq)  # Positive quantity
    _, _,_, _, matrix_fd = occupation_solver.apply_centraldiff_matrix(matrix_fd, df, field)
    if pp.derL:
        _,_,_,matrix_fd = occupation_solver.apply_centraldiff_matrix_L(matrix_fd, df, field)

    loopstart = time.time()
    # Will only be able to run if you have a precalculated chi stored on file
    b_chi = (-1) * c.e * field / c.kb_joule / pp.T * np.squeeze(df['vx [m/s]'] * df['k_FD']) * (1 - df['k_FD'])
    if pp.verboseError:
        b_chi_check = np.dot(freq_matrix+matrix_sc*scmfac-matrix_fd,chi)
        error_chi = np.linalg.norm(b_chi_check - b_chi)/np.linalg.norm(b_chi)
        print('Residual error of chi is {:3E}'.format(error_chi))
    f0 = df['k_FD'].values
    f = chi + f0
    g_inds, l_inds, x_inds = utilities.split_valleys(df,False)
    # ng,nl,nx,n = utilities.calc_popsplit(chi,df)
    f_g = np.zeros(len(f), dtype=np.complex)
    f_l = np.zeros(len(f), dtype=np.complex)
    f_g[g_inds] = f[g_inds]
    f_l[l_inds] = f[l_inds]
    # Select "b" for the Gamma-Gamma autocorrelation.
    b = -f_g*np.sum(f_l)/np.sum(f)
    # chi2psi is used to give the finite difference matrix the right factors in front since substitution made
    invdiag = (np.diag(matrix_sc) * scmfac) ** (-1)
    g_0 = b * invdiag
    print('with callback')
    g_next, criteria = linalg.gmres(freq_matrix+matrix_sc * scmfac-matrix_fd, b,x0=g_0,callback=counter,
                                    tol=pp.relConvergence, atol=pp.absConvergence)
    if pp.verboseError:
        b_check = np.dot(freq_matrix+matrix_sc*scmfac-matrix_fd,g_next)
        error = np.linalg.norm(b_check - b)/np.linalg.norm(b)
        print('Norm of b is {:3E}'.format(np.linalg.norm(b)))
        print('Absolute residual error is {:3E}'.format(np.linalg.norm(b_check-b)))
        print('Relative residual error is {:3E}'.format(error))
    else:
        error = 0
        print('Error not stored.')
    print('GMRES convergence criteria: {:3E}'.format(criteria))
    loopend = time.time()
    print('Convergence took {:.2f}s'.format(loopend - loopstart))
    if not pp.simpleBool:
        # Return chi in all cases so there's not confusion in plotting
        psi2chi = np.squeeze(df['k_FD'] * (1 - df['k_FD']))
        print('Converting psi to chi since matrix in simple linearization')
        g_next = g_next * psi2chi
        g_0 = g_0 * psi2chi
    return g_next, g_0,error, counter.niter


def ng_nlx(chi, matrix_sc, matrix_fd, df, field, freq):
    """Generalized minimal residual solver for calculating transient Gamma-L and Gamma-X autocorrelation using the full
    finite difference matrix.

    Parameters:
        chi (nparray): Solution for the steady distribution function in chi form.
        matrix_sc (memmap): Scattering matrix in simple linearization by default..
        matrix_fd (memmap): Finite difference matrix, generated by apply_centraldiff_matrix.
        df (dataframe): Electron DataFrame indexed by kpt containing the energy associated with each state in eV.
        field (dbl): Value of the electric field in V/m.
        freq (dbl): Frequency in GHz to be used for the transient solution
    Returns:
        g_next (nparray): Numpy array containing the (hopefully) converged iterative solution as g_chi.
        g_0 (nparray): Numpy array containing the RTA solution as g0_chi.
    """
    counter = gmres_counter()
    if pp.scmBool:
        scmfac = pp.scmVal
        print('Applying correction factor to the scattering matrix.')
    else:
        scmfac = 1
        print('Not applying correction factor to scattering matrix.')

    print('Starting transient Gamma-L/X population autocorrelation solver for {:.3E} V/m and {:E} GHz'.format(field,freq))
    freq_matrix = np.diag(np.ones(len(df))*1j*10**9*2*np.pi*freq)  # Positive quantity
    _, icinds_l,icinds_r, _, matrix_fd = occupation_solver.apply_centraldiff_matrix(matrix_fd, df, field)
    loopstart = time.time()
    # Will only be able to run if you have a precalculated chi stored on file

    b_chi = (-1) * c.e * field / c.kb_joule / pp.T * np.squeeze(df['vx [m/s]'] * df['k_FD']) * (1 - df['k_FD'])
    if pp.verboseError:
        b_chi_check = np.dot(freq_matrix+matrix_sc*scmfac-matrix_fd,chi)
        error_chi = np.linalg.norm(b_chi_check - b_chi)/np.linalg.norm(b_chi)
        print('Residual error of chi is {:3E}'.format(error_chi))
    f0 = df['k_FD'].values
    f = chi + f0
    g_inds, l_inds, x_inds = utilities.split_valleys(df,False)
    # ng,nl,nx,n = utilities.calc_popsplit(chi,df)
    f_g = np.zeros(len(f), dtype=np.complex)
    f_l = np.zeros(len(f), dtype=np.complex)
    f_x = np.zeros(len(f), dtype=np.complex)
    f_g[g_inds] = f[g_inds]
    f_l[l_inds] = f[l_inds]
    f_x[x_inds] = f[x_inds]
    # Select "b" for the Gamma-Gamma autocorrelation
    b = -f_g
    # chi2psi is used to give the finite difference matrix the right factors in front since substitution made
    psi2chi = np.squeeze(df['k_FD'] * (1 - df['k_FD']))
    invdiag = (np.diag(matrix_sc) * scmfac) ** (-1)
    g_0 = b * invdiag
    print('with callback')
    g_next, criteria = linalg.gmres(freq_matrix+matrix_sc * scmfac-matrix_fd, b,x0=g_0,callback=counter,
                                    tol=pp.relConvergence, atol=pp.absConvergence)
    if pp.verboseError:
        b_check = np.dot(freq_matrix+matrix_sc*scmfac-matrix_fd,g_next)
        error = np.linalg.norm(b_check - b)/np.linalg.norm(b)
        print('Norm of b is {:3E}'.format(np.linalg.norm(b)))
        print('Absolute residual error is {:3E}'.format(np.linalg.norm(b_check-b)))
        print('Relative residual error is {:3E}'.format(error))
    else:
        error = 0

    g_next_nl = -g_next*np.sum(f_l)/np.sum(f)  # Adjust the g_next to account for the population fraction
    g_next_nx = -g_next*np.sum(f_x)/np.sum(f)  # Adjust the g_next to account for the population fraction
    print('GMRES convergence criteria: {:3E}'.format(criteria))
    loopend = time.time()
    print('Convergence took {:.2f}s'.format(loopend - loopstart))
    if not pp.simpleBool:
        # Return chi in all cases so there's not confusion in plotting
        print('Converting psi to chi since matrix in simple linearization')
        g_next_nl = g_next_nl * psi2chi
        g_next_nx = g_next_nx * psi2chi
        g_0 = g_0 * psi2chi
    return g_next_nl,g_next_nx, g_0,error, counter.niter


def nl_nx(chi, matrix_sc, matrix_fd, df, field, freq):
    """Generalized minimal residual solver for calculating transient Gamma-L and Gamma-X autocorrelation using the full
    finite difference matrix.

    Parameters:
        chi (nparray): Solution for the steady distribution function in chi form.
        matrix_sc (memmap): Scattering matrix in simple linearization by default..
        matrix_fd (memmap): Finite difference matrix, generated by apply_centraldiff_matrix.
        df (dataframe): Electron DataFrame indexed by kpt containing the energy associated with each state in eV.
        field (dbl): Value of the electric field in V/m.
        freq (dbl): Frequency in GHz to be used for the transient solution
    Returns:
        g_next (nparray): Numpy array containing the (hopefully) converged iterative solution as g_chi.
        g_0 (nparray): Numpy array containing the RTA solution as g0_chi.
    """
    counter = gmres_counter()
    if pp.scmBool:
        scmfac = pp.scmVal
        print('Applying correction factor to the scattering matrix.')
    else:
        scmfac = 1
        print('Not applying correction factor to scattering matrix.')

    print('Starting transient Gamma-L/X population autocorrelation solver for {:.3E} V/m and {:E} GHz'.format(field,freq))
    freq_matrix = np.diag(np.ones(len(df))*1j*10**9*2*np.pi*freq)  # Positive quantity
    _, icinds_l,icinds_r, _, matrix_fd = occupation_solver.apply_centraldiff_matrix(matrix_fd, df, field)
    loopstart = time.time()
    # Will only be able to run if you have a precalculated chi stored on file
    b_chi = (-1) * c.e * field / c.kb_joule / pp.T * np.squeeze(df['vx [m/s]'] * df['k_FD']) * (1 - df['k_FD'])
    if pp.verboseError:
        b_chi_check = np.dot(freq_matrix+matrix_sc*scmfac-matrix_fd,chi)
        error_chi = np.linalg.norm(b_chi_check - b_chi)/np.linalg.norm(b_chi)
        print('Residual error of chi is {:3E}'.format(error_chi))
    f0 = df['k_FD'].values
    f = chi + f0
    g_inds, l_inds, x_inds = utilities.split_valleys(df,False)
    ng,nl,nx,n = utilities.calc_popsplit(chi,df)
    f_l = np.zeros(len(f), dtype=np.complex)
    f_x = np.zeros(len(f), dtype=np.complex)
    f_l[l_inds] = f[l_inds]
    f_x[x_inds] = f[x_inds]

    # Select "b" for the Gamma-Gamma autocorrelation
    b = -f_l
    # chi2psi is used to give the finite difference matrix the right factors in front since substitution made
    psi2chi = np.squeeze(df['k_FD'] * (1 - df['k_FD']))
    invdiag = (np.diag(matrix_sc) * scmfac) ** (-1)
    g_0 = b * invdiag
    print('with callback')
    g_next, criteria = linalg.gmres(freq_matrix+matrix_sc * scmfac-matrix_fd, b,x0=g_0,callback=counter,
                                    tol=pp.relConvergence, atol=pp.absConvergence)
    if pp.verboseError:
        b_check = np.dot(freq_matrix+matrix_sc*scmfac-matrix_fd,g_next)
        error = np.linalg.norm(b_check - b)/np.linalg.norm(b)
        print('Norm of b is {:3E}'.format(np.linalg.norm(b)))
        print('Absolute residual error is {:3E}'.format(np.linalg.norm(b_check-b)))
        print('Relative residual error is {:3E}'.format(error))
    else:
        error = 0
        print('Error not stored.')
    g_next_nl = -g_next*np.sum(f_x)/np.sum(f) # Adjust the g_next to account for the population fraction
    print('GMRES convergence criteria: {:3E}'.format(criteria))
    loopend = time.time()
    print('Convergence took {:.2f}s'.format(loopend - loopstart))
    if not pp.simpleBool:
        # Return chi in all cases so there's not confusion in plotting
        print('Converting psi to chi since matrix in simple linearization')
        g_next_nl = g_next_nl * psi2chi
        g_0 = g_0 * psi2chi
    return g_next_nl, g_0,error, counter.niter


def vd_vd(chi, matrix_sc, matrix_fd, df, field, freq):
    """Generalized minimal residual solver for calculating transient vd-vd autocorrelation using the full
    finite difference matrix.
    Parameters:
        chi (nparray): Solution for the steady distribution function in chi form.
        matrix_sc (memmap): Scattering matrix in simple linearization by default..
        matrix_fd (memmap): Finite difference matrix, generated by apply_centraldiff_matrix.
        df (dataframe): Electron DataFrame indexed by kpt containing the energy associated with each state in eV.
        field (dbl): Value of the electric field in V/m.
        freq (dbl): Frequency in GHz to be used for the transient solution
    Returns:
        g_next (nparray): Numpy array containing the (hopefully) converged iterative solution as g_chi.
        g_0 (nparray): Numpy array containing the RTA solution as g0_chi.
    """
    counter = gmres_counter()
    print('Starting transient vd-vd population autocorrelation solver for {:.3E} and {:E} GHz'.format(field,freq))
    freq_matrix = np.diag(np.ones(len(df))*1j*10**9*2*np.pi*freq)  # Positive quantity
    if pp.scmBool:
        scmfac = pp.scmVal
        print('Applying correction factor to the scattering matrix.')
    else:
        scmfac = 1
        print('Not applying correction factor to the scattering matrix.')
    _, _,_, _, matrix_fd  = occupation_solver.apply_centraldiff_matrix(matrix_fd, df, field)
    if pp.derL:
        _,_,_,matrix_fd = occupation_solver.apply_centraldiff_matrix_L(matrix_fd, df, field)
    loopstart = time.time()
    # Will only be able to run if you have a precalculated chi stored on file
    b_chi = (-1) * c.e * field / c.kb_joule / pp.T * np.squeeze(df['vx [m/s]'] * df['k_FD']) * (1 - df['k_FD'])
    if pp.verboseError:
        b_chi_check = np.dot(freq_matrix+matrix_sc*scmfac-matrix_fd,chi)
        error_chi = np.linalg.norm(b_chi_check - b_chi)/np.linalg.norm(b_chi)
        print('Residual error of chi is {:3E}'.format(error_chi))
    f0 = df['k_FD'].values
    f = chi + f0
    g_inds, l_inds, x_inds = utilities.split_valleys(df,False)
    g_df = df.loc[g_inds]
    l_df = df.loc[l_inds]
    if pp.getX:
        x_df = df.loc[x_inds]
    ng,nl,nx,n = utilities.calc_popsplit(chi,df)
    # Case #10: b = -(vx-vd_gl)f_gl
    b = np.zeros(len(df))
    g_vel = utilities.mean_velocity(chi[g_inds],g_df)
    l_vel = utilities.mean_velocity(chi[l_inds],l_df)
    if pp.getX:
        x_vel = utilities.mean_velocity(chi[x_inds],x_df)
    print('Mean drift velocity in Gamma is {:3E}'.format(g_vel))
    print('Mean drift velocity in L is {:3E}'.format(l_vel))
    print('Mean thermal velocity in Gamma is {:3E}'.format(np.mean(np.abs(g_df['vx [m/s]'].values))))
    print('Mean thermal velocity in L is {:3E}'.format(np.mean(np.abs(l_df['vx [m/s]'].values))))
    print('Population in Gamma is {:3E}'.format(ng))
    print('Population in L is {:3E}'.format(nl))
    print('Drift velocity is {:3E}'.format(utilities.mean_velocity(chi,df)))
    b[g_inds] = (-1) * ((g_df['vx [m/s]'] - g_vel) * f[g_inds])
    b[l_inds] = (-1) * ((l_df['vx [m/s]'] - l_vel) * f[l_inds])
    if pp.getX:
        b[x_inds] = (-1) * ((x_df['vx [m/s]'] - x_vel) * f[x_inds])

    # chi2psi is used to give the finite difference matrix the right factors in front since substitution made
    psi2chi = np.squeeze(df['k_FD'] * (1 - df['k_FD']))
    invdiag = (np.diag(matrix_sc) * scmfac) ** (-1)
    g_0 = b * invdiag
    g_next, criteria = linalg.gmres(freq_matrix+matrix_sc * scmfac-matrix_fd, b,x0=g_0,callback=counter,
                                    tol=pp.relConvergence, atol=pp.absConvergence)
    if pp.verboseError:
        b_check = np.dot(freq_matrix+matrix_sc*scmfac-matrix_fd,g_next)
        error = np.linalg.norm(b_check - b)/np.linalg.norm(b)
        print('Norm of b is {:3E}'.format(np.linalg.norm(b)))
        print('Absolute residual error is {:3E}'.format(np.linalg.norm(b_check-b)))
        print('Relative residual error is {:3E}'.format(error))
        print('GMRES convergence criteria: {:3E}'.format(criteria))
    else:
        error = 0
        print('Error not stored.')
    loopend = time.time()
    print('Convergence took {:.2f}s'.format(loopend - loopstart))
    if not pp.simpleBool:
        # Return chi in all cases so there's not confusion in plotting
        print('Converting psi to chi since matrix in simple linearization')
        g_next = g_next * psi2chi
        g_0 = g_0 * psi2chi
    return g_next, g_0,error, counter.niter


def g_vd_vd(chi, matrix_sc, matrix_fd, df, field, freq):
    """Generalized minimal residual solver for calculating transient Gamma vd-vd autocorrelation using the full
    finite difference matrix.
    Parameters:
        chi (nparray): Solution for the steady distribution function in chi form.
        matrix_sc (memmap): Scattering matrix in simple linearization by default..
        matrix_fd (memmap): Finite difference matrix, generated by apply_centraldiff_matrix.
        df (dataframe): Electron DataFrame indexed by kpt containing the energy associated with each state in eV.
        field (dbl): Value of the electric field in V/m.
        freq (dbl): Frequency in GHz to be used for the transient solution
    Returns:
        g_next (nparray): Numpy array containing the (hopefully) converged iterative solution as g_chi.
        g_0 (nparray): Numpy array containing the RTA solution as g0_chi.
    """
    counter = gmres_counter()
    print('Starting transient Gamma vd-vd population autocorrelation solver for {:.3E} and {:E} GHz'.format(field,freq))
    freq_matrix = np.diag(np.ones(len(df))*1j*10**9*2*np.pi*freq)  # Positive quantity
    if pp.scmBool:
        scmfac = pp.scmVal
        print('Applying correction factor to the scattering matrix.')
    else:
        scmfac = 1
        print('Not applying correction factor to the scattering matrix.')
    _, _,_, _, matrix_fd  = occupation_solver.apply_centraldiff_matrix(matrix_fd, df, field)
    if pp.derL:
        _,_,_,matrix_fd = occupation_solver.apply_centraldiff_matrix_L(matrix_fd, df, field)
    loopstart = time.time()
    # Will only be able to run if you have a precalculated chi stored on file
    b_chi = (-1) * c.e * field / c.kb_joule / pp.T * np.squeeze(df['vx [m/s]'] * df['k_FD']) * (1 - df['k_FD'])
    if pp.verboseError:
        b_chi_check = np.dot(freq_matrix+matrix_sc*scmfac-matrix_fd,chi)
        error_chi = np.linalg.norm(b_chi_check - b_chi)/np.linalg.norm(b_chi)
        print('Residual error of chi is {:3E}'.format(error_chi))
    f0 = df['k_FD'].values
    f = chi + f0
    g_inds, l_inds, x_inds = utilities.split_valleys(df,False)
    g_df = df.loc[g_inds]
    l_df = df.loc[l_inds]
    if pp.getX:
        x_df = df.loc[x_inds]
    ng,nl,nx,n = utilities.calc_popsplit(chi,df)
    # Case #10: b = -(vx-vd_gl)f_gl
    b = np.zeros(len(df))
    g_vel = utilities.mean_velocity(chi[g_inds],g_df)
    b[g_inds] = (-1) * ((g_df['vx [m/s]'] - g_vel) * f[g_inds])

    # chi2psi is used to give the finite difference matrix the right factors in front since substitution made
    psi2chi = np.squeeze(df['k_FD'] * (1 - df['k_FD']))
    invdiag = (np.diag(matrix_sc) * scmfac) ** (-1)
    g_0 = b * invdiag
    g_next, criteria = linalg.gmres(freq_matrix+matrix_sc * scmfac-matrix_fd, b,x0=g_0,callback=counter,
                                    tol=pp.relConvergence, atol=pp.absConvergence)
    if pp.verboseError:
        b_check = np.dot(freq_matrix+matrix_sc*scmfac-matrix_fd,g_next)
        error = np.linalg.norm(b_check - b)/np.linalg.norm(b)
        print('Norm of b is {:3E}'.format(np.linalg.norm(b)))
        print('Absolute residual error is {:3E}'.format(np.linalg.norm(b_check-b)))
        print('Relative residual error is {:3E}'.format(error))
        print('GMRES convergence criteria: {:3E}'.format(criteria))
    else:
        error = 0
        print('Error not stored.')
    loopend = time.time()
    print('Convergence took {:.2f}s'.format(loopend - loopstart))
    if not pp.simpleBool:
        # Return chi in all cases so there's not confusion in plotting
        print('Converting psi to chi since matrix in simple linearization')
        g_next = g_next * psi2chi
        g_0 = g_0 * psi2chi
    return g_next, g_0,error, counter.niter


def l_vd_vd(chi, matrix_sc, matrix_fd, df, field, freq):
    """Generalized minimal residual solver for calculating transient vd-vd autocorrelation using the full
    finite difference matrix.
    Parameters:
        chi (nparray): Solution for the steady distribution function in chi form.
        matrix_sc (memmap): Scattering matrix in simple linearization by default..
        matrix_fd (memmap): Finite difference matrix, generated by apply_centraldiff_matrix.
        df (dataframe): Electron DataFrame indexed by kpt containing the energy associated with each state in eV.
        field (dbl): Value of the electric field in V/m.
        freq (dbl): Frequency in GHz to be used for the transient solution
    Returns:
        g_next (nparray): Numpy array containing the (hopefully) converged iterative solution as g_chi.
        g_0 (nparray): Numpy array containing the RTA solution as g0_chi.
    """
    counter = gmres_counter()
    print('Starting transient L vd-vd population autocorrelation solver for {:.3E} and {:E} GHz'.format(field,freq))
    freq_matrix = np.diag(np.ones(len(df))*1j*10**9*2*np.pi*freq)  # Positive quantity
    if pp.scmBool:
        scmfac = pp.scmVal
        print('Applying correction factor to the scattering matrix.')
    else:
        scmfac = 1
        print('Not applying correction factor to the scattering matrix.')
    _, _,_, _, matrix_fd  = occupation_solver.apply_centraldiff_matrix(matrix_fd, df, field)
    if pp.derL:
        _,_,_,matrix_fd = occupation_solver.apply_centraldiff_matrix_L(matrix_fd, df, field)
    loopstart = time.time()
    # Will only be able to run if you have a precalculated chi stored on file
    b_chi = (-1) * c.e * field / c.kb_joule / pp.T * np.squeeze(df['vx [m/s]'] * df['k_FD']) * (1 - df['k_FD'])
    if pp.verboseError:
        b_chi_check = np.dot(freq_matrix+matrix_sc*scmfac-matrix_fd,chi)
        error_chi = np.linalg.norm(b_chi_check - b_chi)/np.linalg.norm(b_chi)
        print('Residual error of chi is {:3E}'.format(error_chi))
    f0 = df['k_FD'].values
    f = chi + f0
    g_inds, l_inds, x_inds = utilities.split_valleys(df,False)
    l_df = df.loc[l_inds]
    ng,nl,nx,n = utilities.calc_popsplit(chi,df)
    # Case #10: b = -(vx-vd_gl)f_gl
    b = np.zeros(len(df))
    l_vel = utilities.mean_velocity(chi[l_inds],l_df)
    b[l_inds] = (-1) * ((l_df['vx [m/s]'] - l_vel) * f[l_inds])

    # chi2psi is used to give the finite difference matrix the right factors in front since substitution made
    psi2chi = np.squeeze(df['k_FD'] * (1 - df['k_FD']))
    invdiag = (np.diag(matrix_sc) * scmfac) ** (-1)
    g_0 = b * invdiag
    g_next, criteria = linalg.gmres(freq_matrix+matrix_sc * scmfac-matrix_fd, b,x0=g_0,callback=counter,
                                    tol=pp.relConvergence, atol=pp.absConvergence)
    if pp.verboseError:
        b_check = np.dot(freq_matrix+matrix_sc*scmfac-matrix_fd,g_next)
        error = np.linalg.norm(b_check - b)/np.linalg.norm(b)
        print('Norm of b is {:3E}'.format(np.linalg.norm(b)))
        print('Absolute residual error is {:3E}'.format(np.linalg.norm(b_check-b)))
        print('Relative residual error is {:3E}'.format(error))
        print('GMRES convergence criteria: {:3E}'.format(criteria))
    else:
        error = 0
        print('Error not stored.')
    loopend = time.time()
    print('Convergence took {:.2f}s'.format(loopend - loopstart))
    if not pp.simpleBool:
        # Return chi in all cases so there's not confusion in plotting
        print('Converting psi to chi since matrix in simple linearization')
        g_next = g_next * psi2chi
        g_0 = g_0 * psi2chi
    return g_next, g_0,error, counter.niter


def write_ngl_nlx(fieldVector,df,freq):
    """Calls the GMRES solver hard coded for solving the effective BTE w/FDM for the Gamma-L, Gamma-X, X-L population
    autocorrelation for two-valleys and writes to file.
    Parameters:
        fieldVector (nparray): Vector containing the values of the electric field to be evaluated in V/m.
        df (dataframe): Electron DataFrame indexed by kpt containing the energy associated with each state in eV.
        freq (dbl): Frequency in GHz to be used for the transient solution
    Returns:
        None. Just writes the chi solutions to file. chi_#_EField. #1 corresponds to low-field RTA, #2 corresponds to
        low-field iterative, #3 corresponds to full finite-difference iterative.
    """
    nkpts = len(np.unique(df['k_inds']))
    scm = np.memmap(pp.inputLoc + pp.scmName, dtype='float64', mode='r', shape=(nkpts, nkpts))
    # utilities.check_matrix_properties(scm)
    error_1 = []
    iteration_count_1 = []
    error_2 = []
    iteration_count_2 = []
    for i in range(len(fieldVector)):
        EField = fieldVector[i]
        chi = np.load(pp.outputLoc + 'Transient/' + 'chi_' + '3_' + "f_{:.1e}_E_{:.1e}.npy".format(freq,EField))
        fdm = np.memmap(pp.inputLoc + 'finite_difference_matrix.mmap', dtype='float64', mode='w+', shape=(nkpts, nkpts))
        g_next_nl, g_next_nx, _, error_i1, iterations_i1= ng_nlx(chi, scm, fdm, df, EField, freq)
        g_next, _,error_i2, iterations_i2 = nl_nx(chi, scm, fdm, df, EField, freq)
        error_1.append(error_i1)
        error_2.append(error_i2)
        iteration_count_1.append(iterations_i1)
        iteration_count_2.append(iterations_i2)
        del fdm
        np.save(pp.outputLoc + 'Intervalley/' + 'ng_nl_' + '3_' + "f_{:.1e}_E_{:.1e}".format(freq,EField),g_next_nl)
        np.save(pp.outputLoc + 'Intervalley/' + 'ng_nx_' + '3_' + "f_{:.1e}_E_{:.1e}".format(freq,EField),g_next_nx)
        np.save(pp.outputLoc + 'Intervalley/' + 'nl_nx_' + '3_' + "f_{:.1e}_E_{:.1e}".format(freq,EField),g_next)
        print('Transient solution written to file for ' + "{:.1e} V/m and {:.1e} GHz".format(EField,freq))
        print('\n \n')

    if pp.verboseError:
        plt.figure()
        plt.plot(fieldVector * 1E-5, error_1)
        plt.xlabel('EField (kV/cm)')
        plt.ylabel(r'$|Ax_{f}-b|/|b|$')
        plt.title('ng_nl/nx {:.1e} GHz'.format(freq) + pp.title_str)

        plt.figure()
        plt.plot(fieldVector * 1E-5, error_2)
        plt.xlabel('EField (kV/cm)')
        plt.ylabel(r'$|Ax_{f}-b|/|b|$')
        plt.title('nl_nx {:.1e} GHz'.format(freq) + pp.title_str)

    plt.figure()
    plt.plot(fieldVector * 1E-5, iteration_count_1)
    plt.xlabel('EField (kV/cm)')
    plt.ylabel('Iterations to convergence')
    plt.title('ng_nl/nx {:.1e} GHz'.format(freq) + pp.title_str)

    plt.figure()
    plt.plot(fieldVector * 1E-5, iteration_count_2)
    plt.xlabel('EField (kV/cm)')
    plt.ylabel('Iterations to convergence')
    plt.title('nl_nx {:.1e} GHz'.format(freq) + pp.title_str)


def write_ng_ng(fieldVector,df,freq):
    """Calls the GMRES solver hard coded for solving the effective BTE w/FDM for the Gamma-Gamma population
    autocorrelation for two-valleys and writes to file.
    Parameters:
        fieldVector (nparray): Vector containing the values of the electric field to be evaluated in V/m.
        df (dataframe): Electron DataFrame indexed by kpt containing the energy associated with each state in eV.
        freq (dbl): Frequency in GHz to be used for the transient solution
    Returns:
        None. Just writes the chi solutions to file. chi_#_EField. #1 corresponds to low-field RTA, #2 corresponds to
        low-field iterative, #3 corresponds to full finite-difference iterative.
    """
    nkpts = len(np.unique(df['k_inds']))
    scm = np.memmap(pp.inputLoc + pp.scmName, dtype='float64', mode='r', shape=(nkpts, nkpts))
    utilities.check_matrix_properties(scm)
    error = []
    iteration_count = []
    for i in range(len(fieldVector)):
        EField = fieldVector[i]
        # chi = np.load(pp.outputLoc + 'Transient/' + 'chi_' + '3_' + "f_{:.1e}_E_{:.1e}.npy".format(freq,EField))
        chi = np.load(pp.outputLoc + 'Steady/' + 'chi_' + '3_' + "E_{:.1e}.npy".format(EField))
        fdm = np.memmap(pp.inputLoc + 'finite_difference_matrix.mmap', dtype='float64', mode='w+', shape=(nkpts, nkpts))
        g_next, g_3_johnson,temp_error, iterations = ng_ng(chi, scm, fdm, df, EField, freq)
        error.append(temp_error)
        iteration_count.append(iterations)
        del fdm
        np.save(pp.outputLoc + 'Intervalley/' + 'ng_ng_' + '3_' + "f_{:.1e}_E_{:.1e}".format(freq,EField),g_next)
        print('Transient solution written to file for ' + "{:.1e} V/m and {:.1e} GHz".format(EField,freq))
        print('\n \n')

    if pp.verboseError:
        plt.figure()
        plt.plot(fieldVector*1E-5,error)
        plt.xlabel('EField (kV/cm)')
        plt.ylabel(r'$|Ax_{f}-b|/|b|$')
        plt.title('ng_ng {:.1e} GHz'.format(freq) + pp.title_str)

    plt.figure()
    plt.plot(fieldVector*1E-5,iteration_count)
    plt.xlabel('EField (kV/cm)')
    plt.ylabel('Iterations to convergence')
    plt.title('ng_ng {:.1e} GHz'.format(freq) + pp.title_str)


def write_vd_vd(fieldVector,df,freq):
    """Calls the GMRES solver hard coded for solving the effective BTE w/FDM for the Gamma-Gamma population
    autocorrelation for two-valleys and writes to file.
    Parameters:
        fieldVector (nparray): Vector containing the values of the electric field to be evaluated in V/m.
        df (dataframe): Electron DataFrame indexed by kpt containing the energy associated with each state in eV.
        freq (dbl): Frequency in GHz to be used for the transient solution
    Returns:
        None. Just writes the chi solutions to file. chi_#_EField. #1 corresponds to low-field RTA, #2 corresponds to
        low-field iterative, #3 corresponds to full finite-difference iterative.
    """
    nkpts = len(np.unique(df['k_inds']))
    scm = np.memmap(pp.inputLoc + pp.scmName, dtype='float64', mode='r', shape=(nkpts, nkpts))
    # utilities.check_matrix_properties(scm)
    error = []
    iteration_count = []
    for i in range(len(fieldVector)):
        EField = fieldVector[i]
        # chi = np.load(pp.outputLoc + 'Transient/' + 'chi_' + '3_' + "f_{:.1e}_E_{:.1e}.npy".format(freq,EField))
        chi = np.load(pp.outputLoc + 'Steady/' + 'chi_' + '3_' + "E_{:.1e}.npy".format(EField))
        fdm = np.memmap(pp.inputLoc + 'finite_difference_matrix.mmap', dtype='float64', mode='w+', shape=(nkpts, nkpts))
        g_next, g_3_johnson,temp_error, iterations = vd_vd(chi, scm, fdm, df, EField,freq)
        error.append(temp_error)
        iteration_count.append(iterations)
        del fdm
        np.save(pp.outputLoc + 'Thermal/' + 'vd_vd_' + '3_' + "f_{:.1e}_E_{:.1e}".format(freq,EField),g_next)
        print('Transient solution written to file for ' + "{:.1e} V/m and {:.1e} GHz".format(EField,freq))
        print('\n \n')

    if pp.verboseError:
        plt.figure()
        plt.plot(fieldVector*1E-5,error)
        plt.xlabel('EField (kV/cm)')
        plt.ylabel(r'$|Ax_{f}-b|/|b|$')
        plt.title('vd_vd {:.1e} GHz'.format(freq) + pp.title_str)

    plt.figure()
    plt.plot(fieldVector*1E-5,iteration_count)
    plt.xlabel('EField (kV/cm)')
    plt.ylabel('Iterations to convergence')
    plt.title('vd_vd {:.1e} GHz'.format(freq) + pp.title_str)


if __name__ == '__main__':
    # Create electron and phonon dataframes
    preprocessing.create_el_ph_dataframes(pp.inputLoc, overwrite=True)
    electron_df, phonon_df = utilities.load_el_ph_data(pp.inputLoc)
    electron_df = utilities.fermi_distribution(electron_df)

    fields = pp.fieldVector
    freq = pp.freqGHz

    writeIntervalley = True
    writeThermal = True
    if pp.getX:
        if writeThermal:
            write_vd_vd(fields, electron_df, freq)
        if writeIntervalley:
            write_ngl_nlx(fields, electron_df, freq)
    else:
        if writeIntervalley:
            write_ng_ng(fields, electron_df, freq)
        if writeThermal:
            write_vd_vd(fields, electron_df, freq)
    plt.show()