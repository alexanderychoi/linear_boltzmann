{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Processing the electron-phonon collision matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is meant to be a frills-free calculation of the electron-phonon collision matrix utiizing the data from Jin Jian Zhou for GaAs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Package imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Image processing tools\n",
    "import skimage\n",
    "import skimage.filters\n",
    "\n",
    "import pandas as pd\n",
    "import scipy.optimize\n",
    "import scipy.stats as st\n",
    "import numba\n",
    "import itertools\n",
    "\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from numpy.linalg import inv\n",
    "\n",
    "from tqdm import tqdm, trange\n",
    "from scipy import special, optimize\n",
    "from scipy import integrate\n",
    "\n",
    "import plotly.plotly as py\n",
    "import plotly.graph_objs as go\n",
    "import plotly\n",
    "#plotly.tools.set_credentials_file(username='AYChoi', api_key='ZacDa7fKo8hfiELPfs57')\n",
    "plotly.tools.set_credentials_file(username='AlexanderYChoi', api_key='VyLt05wzc89iXwSC82FO')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data processing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Take the raw text files and convert them into useful dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Physical parameter definition\n",
    "a = 5.556                        # Lattice constant for GaAs [A]\n",
    "kb = 1.38064852*10**(-23)        # Boltzmann constant in SI [m^2 kg s^-2 K^-1]\n",
    "T = 300                          # Lattice temeprature [K]\n",
    "e = 1.602*10**(-19)              # Fundamental electronic charge [C]\n",
    "mu = 5.780                       # Chemical potential [eV]\n",
    "b = 8/1000                       # Gaussian broadening [eV]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████████████████████████████████████████████████████████████| 7854608/7854608 [00:33<00:00, 231506.60it/s]\n"
     ]
    }
   ],
   "source": [
    "data = pd.read_csv('gaas.eph_matrix', sep='\\t',header= None,skiprows=(0,1))\n",
    "data.columns = ['0']\n",
    "data_array = data['0'].values\n",
    "new_array = np.zeros((len(data_array),7))\n",
    "for i1 in trange(len(data_array)):\n",
    "    new_array[i1,:] = data_array[i1].split()\n",
    "    \n",
    "g_df = pd.DataFrame(data=new_array,columns = ['k_inds','q_inds','k+q_inds','m_band','n_band','im_mode','g_element'])\n",
    "g_df[['k_inds','q_inds','k+q_inds','m_band','n_band','im_mode']] = g_df[['k_inds','q_inds','k+q_inds','m_band','n_band','im_mode']].apply(pd.to_numeric,downcast = 'integer')\n",
    "\n",
    "\n",
    "g_df = g_df.drop([\"m_band\",\"n_band\"],axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question: What does the number of k-points correspond to? 100^3 is what you told me but there are only ~2300 or so unique k point indices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████████████████████████████████████| 2213/2213 [00:00<00:00, 317029.67it/s]\n",
      "100%|██████████████████████████████████████████████████████████████████████| 126480/126480 [00:00<00:00, 327670.28it/s]\n",
      "100%|████████████████████████████████████████████████████████████████████████| 21080/21080 [00:00<00:00, 315470.35it/s]\n"
     ]
    }
   ],
   "source": [
    "# Import electron energy library\n",
    "enk = pd.read_csv('gaas.enk', sep='\\t',header= None)\n",
    "enk.columns = ['0']\n",
    "enk_array = enk['0'].values\n",
    "new_enk_array = np.zeros((len(enk_array),3))\n",
    "for i1 in trange(len(enk_array)):\n",
    "    new_enk_array[i1,:] = enk_array[i1].split()\n",
    "    \n",
    "enk_df = pd.DataFrame(data=new_enk_array,columns = ['k_inds','band_inds','energy [Ryd]'])\n",
    "enk_df[['k_inds','band_inds']] = enk_df[['k_inds','band_inds']].apply(pd.to_numeric,downcast = 'integer')\n",
    "enk_df = enk_df.drop(['band_inds'],axis=1)\n",
    "\n",
    "# Import phonon energy library\n",
    "enq = pd.read_csv('gaas.enq', sep='\\t',header= None)\n",
    "enq.columns = ['0']\n",
    "enq_array = enq['0'].values\n",
    "new_enq_array = np.zeros((len(enq_array),3))\n",
    "for i1 in trange(len(enq_array)):\n",
    "    new_enq_array[i1,:] = enq_array[i1].split()\n",
    "    \n",
    "enq_df = pd.DataFrame(data=new_enq_array,columns = ['q_inds','im_mode','energy [Ryd]'])\n",
    "enq_df[['q_inds','im_mode']] = enq_df[['q_inds','im_mode']].apply(pd.to_numeric,downcast = 'integer')\n",
    "\n",
    "\n",
    "# Import phonon q-point index\n",
    "qpts = pd.read_csv('gaas.qpts', sep='\\t',header= None)\n",
    "qpts.columns = ['0']\n",
    "qpts_array = qpts['0'].values\n",
    "new_qpt_array = np.zeros((len(qpts_array),4))\n",
    "\n",
    "for i1 in trange(len(qpts_array)):\n",
    "    new_qpt_array[i1,:] = qpts_array[i1].split()\n",
    "    \n",
    "qpts_df = pd.DataFrame(data=new_qpt_array,columns = ['q_inds','b1','b2','b3'])\n",
    "qpts_df[['q_inds']] = qpts_df[['q_inds']].apply(pd.to_numeric,downcast = 'integer')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question: Why is the energy difference between max and min states ~0.43 eV? Thought it should be around 0.3 eV?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4373955800678173"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(enk_df['energy [Ryd]'].max()-enk_df['energy [Ryd]'].min())*13.6056980659"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████████████████████████████████████| 2213/2213 [00:00<00:00, 184915.03it/s]\n"
     ]
    }
   ],
   "source": [
    "# Import electron k-point index and group velocities\n",
    "\n",
    "kvel = pd.read_csv('gaas.vel', sep='\\t',header= None,skiprows=[0,1,2])\n",
    "kvel.columns = ['0']\n",
    "kvel_array = kvel['0'].values\n",
    "new_kvel_array = np.zeros((len(kvel_array),10))\n",
    "for i1 in trange(len(kvel_array)):\n",
    "    new_kvel_array[i1,:] = kvel_array[i1].split()\n",
    "    \n",
    "kvel_df = pd.DataFrame(data=new_kvel_array,columns = ['k_inds','bands','energy','kx [2pi/alat]','ky [2pi/alat]','kz [2pi/alat]','vx_dir','vy_dir','vz_dir','v_mag [m/s]'])\n",
    "kvel_df[['k_inds']] = kvel_df[['k_inds']].apply(pd.to_numeric,downcast = 'integer')\n",
    "\n",
    "kvel_edit = kvel_df.copy(deep=True)\n",
    "\n",
    "# Shift the points back into the first BZ\n",
    "kx_plus = kvel_df['kx [2pi/alat]'] > 0.5\n",
    "kx_minus = kvel_df['kx [2pi/alat]'] < -0.5\n",
    "\n",
    "ky_plus = kvel_df['ky [2pi/alat]'] > 0.5\n",
    "ky_minus = kvel_df['ky [2pi/alat]'] < -0.5\n",
    "\n",
    "kz_plus = kvel_df['kz [2pi/alat]'] > 0.5\n",
    "kz_minus = kvel_df['kz [2pi/alat]'] < -0.5\n",
    "\n",
    "kvel_edit.loc[kx_plus,'kx [2pi/alat]'] = kvel_df.loc[kx_plus,'kx [2pi/alat]'] -1\n",
    "kvel_edit.loc[kx_minus,'kx [2pi/alat]'] = kvel_df.loc[kx_minus,'kx [2pi/alat]'] +1\n",
    "\n",
    "kvel_edit.loc[ky_plus,'ky [2pi/alat]'] = kvel_df.loc[ky_plus,'ky [2pi/alat]'] -1\n",
    "kvel_edit.loc[ky_minus,'ky [2pi/alat]'] = kvel_df.loc[ky_minus,'ky [2pi/alat]'] +1\n",
    "\n",
    "kvel_edit.loc[kz_plus,'kz [2pi/alat]'] = kvel_df.loc[kz_plus,'kz [2pi/alat]'] -1\n",
    "kvel_edit.loc[kz_minus,'kz [2pi/alat]'] = kvel_df.loc[kz_minus,'kz [2pi/alat]'] +1\n",
    "\n",
    "kvel_df = kvel_edit.copy(deep=True)\n",
    "kvel_df.head()\n",
    "\n",
    "cart_kpts_df = kvel_df.copy(deep=True)\n",
    "cart_kpts_df['kx [2pi/alat]'] = cart_kpts_df['kx [2pi/alat]'].values*2*np.pi/a\n",
    "cart_kpts_df['ky [2pi/alat]'] = cart_kpts_df['ky [2pi/alat]'].values*2*np.pi/a\n",
    "cart_kpts_df['kz [2pi/alat]'] = cart_kpts_df['kz [2pi/alat]'].values*2*np.pi/a\n",
    "\n",
    "cart_kpts_df.columns = ['k_inds', 'bands', 'energy', 'kx [1/A]', 'ky [1/A]','kz [1/A]', 'vx_dir', 'vy_dir', 'vz_dir', 'v_mag [m/s]']\n",
    "\n",
    "cart_kpts_df  = cart_kpts_df.drop(['bands'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fermi_distribution(g_df,mu,T):\n",
    "    \"\"\"\n",
    "    This function takes a list of k-point indices and returns the Fermi-distributions and energies associated with each k-point on that list. The Fermi distributions are calculated with respect to a particular chemical potential.      \n",
    "    Parameters:\n",
    "    -----------\n",
    "    \n",
    "    g_df : pandas dataframe containing:\n",
    "    \n",
    "        k_inds : vector_like, shape (n,1)\n",
    "        Index of k point (pre-collision)\n",
    "        \n",
    "        q_inds : vector_like, shape (n,1)\n",
    "        Index of q point\n",
    "        \n",
    "        k+q_inds : vector_like, shape (n,1)\n",
    "        Index of k point (post-collision)\n",
    "        \n",
    "        m_band : vector_like, shape (n,1)\n",
    "        Band index of post-collision state\n",
    "        \n",
    "        n_band : vector_like, shape (n,1)\n",
    "        Band index of pre-collision state\n",
    "        \n",
    "        im_mode : vector_like, shape (n,1)\n",
    "        Polarization of phonon mode\n",
    "        \n",
    "        g_element : vector_like, shape (n,1)\n",
    "        E-ph matrix element\n",
    "        \n",
    "        k_energy : vector_like, shape (n,1)\n",
    "        Energy of the pre collision state\n",
    "        \n",
    "        k+q_energy : vector_like, shape (n,1)\n",
    "        Energy of the post collision state\n",
    "        \n",
    "        \n",
    "    mu : scalar\n",
    "    Chemical potential of electronic states [eV]\n",
    "    \n",
    "    T : scalar\n",
    "    Lattice temperature in Kelvin\n",
    "    \n",
    "    Returns:\n",
    "    --------\n",
    "    \n",
    "    g_df : pandas dataframe containing:\n",
    "\n",
    "        ...\n",
    "        k_fermi_dist : vector_like, shape (n,1)\n",
    "        Fermi distribution of pre collision state\n",
    "        \n",
    "        k+q_fermi_dist : vector_like, shape (n,1)\n",
    "        Fermi distribution of post collision state\n",
    "         \n",
    "    \"\"\"\n",
    "    # Physical constants    \n",
    "    e = 1.602*10**(-19) # fundamental electronic charge [C]\n",
    "    kb = 1.38064852*10**(-23); # Boltzmann constant in SI [m^2 kg s^-2 K^-1]\n",
    "\n",
    "\n",
    "    g_df['k_FD'] = (np.exp((g_df['k_en [eV]'].values*e - mu*e)/(kb*T)) + 1)**(-1)\n",
    "    g_df['k+q_FD'] = (np.exp((g_df['k+q_en [eV]'].values*e - mu*e)/(kb*T)) + 1)**(-1)\n",
    "\n",
    "    return g_df\n",
    "\n",
    "\n",
    "def bose_distribution(g_df,T):\n",
    "    \"\"\"\n",
    "    This function takes a list of q-point indices and returns the Bose-Einstein distributions associated with each q-point on that list.    \n",
    "    Parameters:\n",
    "    -----------\n",
    "    \n",
    "    g_df : pandas dataframe containing:\n",
    "    \n",
    "        ...\n",
    "    \n",
    "    T : scalar\n",
    "    Lattice temperature in Kelvin\n",
    "    \n",
    "    Returns:\n",
    "    --------\n",
    "    \n",
    "    g_df : pandas dataframe containing:\n",
    "\n",
    "        ...\n",
    "        \n",
    "        BE : vector_like, shape (n,1)\n",
    "        Bose-einstein distribution\n",
    "         \n",
    "    \"\"\"\n",
    "    # Physical constants    \n",
    "    e = 1.602*10**(-19) # fundamental electronic charge [C]\n",
    "    kb = 1.38064852*10**(-23); # Boltzmann constant in SI [m^2 kg s^-2 K^-1]\n",
    "\n",
    "    g_df['BE'] = (np.exp((g_df['q_en [eV]'].values*e)/(kb*T)) - 1)**(-1)\n",
    "    return g_df\n",
    "\n",
    "\n",
    "def bosonic_processing(g_df,enq_df,T):\n",
    "    \"\"\"\n",
    "    This function takes the g dataframe and assigns a phonon energy from the relevant phonon library to each collision and the appropriate Bose-Einstein distribution.\n",
    "    -----------\n",
    "    \n",
    "    g_df : pandas dataframe containing:\n",
    "    \n",
    "    \n",
    "    Returns:\n",
    "    --------\n",
    "    \n",
    "    g_df : pandas dataframe containing:\n",
    "    \n",
    "    ...\n",
    "        BE : vector_like, shape (n,1)\n",
    "        Bose-Einstein distribution of the phonon mediating a collision\n",
    "        \n",
    "        q_en [eV] : vector_like, shape (n,1)\n",
    "        The energy of the phonon mode mediating a collision\n",
    "         \n",
    "    \"\"\"\n",
    "    \n",
    "    # Physical constants\n",
    "    e = 1.602*10**(-19) # fundamental electronic charge [C]\n",
    "    kb = 1.38064852*10**(-23); # Boltzmann constant in SI [m^2 kg s^-2 K^-1]\n",
    "    \n",
    "    modified_g_df = g_df.copy(deep=True)\n",
    "    modified_g_df.set_index(['q_inds', 'im_mode'], inplace=True)\n",
    "    modified_g_df = modified_g_df.sort_index()\n",
    "    modified_enq_df = enq_df.copy(deep=True)\n",
    "    modified_enq_df.set_index(['q_inds', 'im_mode'], inplace=True)\n",
    "    modified_enq_df = modified_enq_df.sort_index()\n",
    "    modified_enq_df = modified_enq_df.loc[modified_g_df.index.unique()]\n",
    "    \n",
    "    modified_enq_df = modified_enq_df.reset_index()\n",
    "    modified_enq_df = modified_enq_df.sort_values(['q_inds','im_mode'],ascending=True)\n",
    "    modified_enq_df = modified_enq_df[['q_inds','im_mode','energy [Ryd]']]\n",
    "    modified_enq_df['q_id'] = modified_enq_df.groupby(['q_inds','im_mode']).ngroup()\n",
    "    g_df['q_id'] = g_df.sort_values(['q_inds','im_mode'],ascending=True).groupby(['q_inds','im_mode']).ngroup()\n",
    "    \n",
    "    g_df['q_en [eV]'] = modified_enq_df['energy [Ryd]'].values[g_df['q_id'].values]*13.6056980659\n",
    "    \n",
    "    g_df = bose_distribution(g_df,T)\n",
    "    \n",
    "    return g_df\n",
    "\n",
    "\n",
    "def fermionic_processing(g_df,cart_kpts_df,mu,T):\n",
    "    \"\"\"\n",
    "    This function takes the g dataframe and assigns an electron energy from the relevant electron library to the pre and post collision states and the appropriate Fermi-Diract distributions.\n",
    "    -----------\n",
    "    \n",
    "    g_df : pandas dataframe containing:\n",
    "    \n",
    "    ...\n",
    "    \n",
    "    Returns:\n",
    "    --------\n",
    "    \n",
    "    g_df : pandas dataframe containing:\n",
    "    \n",
    "    ...\n",
    "        k_fermi_dist : vector_like, shape (n,1)\n",
    "        Fermi distribution of pre collision state\n",
    "        \n",
    "        k+q_fermi_dist : vector_like, shape (n,1)\n",
    "        Fermi distribution of post collision state\n",
    "         \n",
    "    \"\"\"\n",
    "\n",
    "    # Pre-collision\n",
    "    modified_g_df_k = g_df.copy(deep=True)\n",
    "    modified_g_df_k.set_index(['k_inds'], inplace=True)\n",
    "    modified_g_df_k = modified_g_df_k.sort_index()\n",
    "\n",
    "    modified_k_df = cart_kpts_df.copy(deep=True)\n",
    "    modified_k_df.set_index(['k_inds'], inplace=True)\n",
    "    modified_k_df = modified_k_df.sort_index()\n",
    "    modified_k_df = modified_k_df.loc[modified_g_df_k.index.unique()]\n",
    "    \n",
    "    modified_k_df = modified_k_df.reset_index()\n",
    "    modified_k_df = modified_k_df.sort_values(['k_inds'],ascending=True)\n",
    "    modified_k_df = modified_k_df[['k_inds','energy','kx [1/A]','ky [1/A]','kz [1/A]']]\n",
    "    \n",
    "    modified_k_df['k_id'] = modified_k_df.groupby(['k_inds']).ngroup()\n",
    "    g_df['k_id'] = g_df.sort_values(['k_inds'],ascending=True).groupby(['k_inds']).ngroup()   \n",
    "    g_df['k_en [eV]'] = modified_k_df['energy'].values[g_df['k_id'].values]\n",
    "    \n",
    "    g_df['kx [1/A]'] = modified_k_df['kx [1/A]'].values[g_df['k_id'].values]\n",
    "    g_df['ky [1/A]'] = modified_k_df['ky [1/A]'].values[g_df['k_id'].values]\n",
    "    g_df['kz [1/A]'] = modified_k_df['kz [1/A]'].values[g_df['k_id'].values]\n",
    "\n",
    "    \n",
    "    # Post-collision\n",
    "    modified_g_df_kq = g_df.copy(deep=True)\n",
    "    modified_g_df_kq.set_index(['k_inds'], inplace=True)\n",
    "    modified_g_df_kq = modified_g_df_kq.sort_index()\n",
    "    \n",
    "    modified_k_df = cart_kpts_df.copy(deep=True)\n",
    "    modified_k_df.set_index(['k_inds'], inplace=True)\n",
    "    modified_k_df = modified_k_df.sort_index()\n",
    "    modified_k_df = modified_k_df.loc[modified_g_df_kq.index.unique()]\n",
    "    \n",
    "    modified_k_df = modified_k_df.reset_index()\n",
    "    modified_k_df = modified_k_df.sort_values(['k_inds'],ascending=True)\n",
    "    modified_k_df = modified_k_df[['k_inds','energy','kx [1/A]','ky [1/A]','kz [1/A]']]\n",
    "    \n",
    "    modified_k_df['k+q_id'] = modified_k_df.groupby(['k_inds']).ngroup()\n",
    "    g_df['k+q_id'] = g_df.sort_values(['k+q_inds'],ascending=True).groupby(['k+q_inds']).ngroup()   \n",
    "    g_df['k+q_en [eV]'] = modified_k_df['energy'].values[g_df['k+q_id'].values]\n",
    "    \n",
    "    g_df['kqx [1/A]'] = modified_k_df['kx [1/A]'].values[g_df['k+q_id'].values]\n",
    "    g_df['kqy [1/A]'] = modified_k_df['ky [1/A]'].values[g_df['k+q_id'].values]\n",
    "    g_df['kqz [1/A]'] = modified_k_df['kz [1/A]'].values[g_df['k+q_id'].values]\n",
    "\n",
    "    \n",
    "    g_df = fermi_distribution(g_df,mu, T)\n",
    "    \n",
    "    g_df = g_df.drop(['k_id','k+q_id'],axis=1)\n",
    "        \n",
    "    return g_df\n",
    "\n",
    "def gaussian_weight(g_df,n):\n",
    "    \"\"\"\n",
    "    This function assigns the value of the delta function approximated by a Gaussian with broadening n.\n",
    "    \n",
    "    Parameters:\n",
    "    -----------\n",
    "    \n",
    "    g_df : pandas dataframe containing:\n",
    "\n",
    "        ...\n",
    "            \n",
    "    n : scalar\n",
    "    Broadening of Gaussian in eV\n",
    "    \n",
    "    Returns:\n",
    "    --------\n",
    "    \"\"\"\n",
    "    \n",
    "    energy_delta_ems = g_df['k_en [eV]'].values - g_df['k+q_en [eV]'].values - g_df['q_en [eV]'].values\n",
    "    energy_delta_abs = g_df['k_en [eV]'].values - g_df['k+q_en [eV]'].values + g_df['q_en [eV]'].values\n",
    "    \n",
    "    g_df['abs_gaussian'] = 1/np.sqrt(np.pi)*1/n*np.exp(-(energy_delta_abs/n)**2)\n",
    "    g_df['ems_gaussian'] = 1/np.sqrt(np.pi)*1/n*np.exp(-(energy_delta_ems/n)**2)\n",
    "    \n",
    "    return g_df\n",
    "\n",
    "def populate_reciprocals(g_df,b):\n",
    "    \"\"\"\n",
    "    The g^2 elements are invariant under substitution of k and k'. Jin-Jian provided the minimal set, that is for a given k-pair linked through a particular collision \n",
    "    and characterized by a say an emission, the reciprocal absorbtion is not included. Here we repopulate these states.\n",
    "    -----------\n",
    "    \n",
    "    g_df : pandas dataframe containing:\n",
    "    \n",
    "    ...\n",
    "    \n",
    "    Returns:\n",
    "    --------\n",
    "    \n",
    "    g_df : pandas dataframe containing:\n",
    "    \n",
    "    ...\n",
    "         \n",
    "    \"\"\"\n",
    "\n",
    "    modified_g_df = g_df.copy(deep=True)\n",
    "\n",
    "    flipped_inds = g_df['k_inds']>g_df['k+q_inds']\n",
    "    modified_g_df.loc[flipped_inds,'k_inds'] = g_df.loc[flipped_inds,'k+q_inds']\n",
    "    modified_g_df.loc[flipped_inds,'k+q_inds'] = g_df.loc[flipped_inds,'k_inds']\n",
    "\n",
    "    modified_g_df.loc[flipped_inds,'k_FD'] = g_df.loc[flipped_inds,'k+q_FD']\n",
    "    modified_g_df.loc[flipped_inds,'k+q_FD'] = g_df.loc[flipped_inds,'k_FD']\n",
    "\n",
    "    modified_g_df.loc[flipped_inds,'k_en [eV]'] = g_df.loc[flipped_inds,'k+q_en [eV]']\n",
    "    modified_g_df.loc[flipped_inds,'k+q_en [eV]'] = g_df.loc[flipped_inds,'k_en [eV]']\n",
    "    \n",
    "    modified_g_df.loc[flipped_inds,'kqx [1/A]'] = g_df.loc[flipped_inds,'kx [1/A]']\n",
    "    modified_g_df.loc[flipped_inds,'kqy [1/A]'] = g_df.loc[flipped_inds,'ky [1/A]']\n",
    "    modified_g_df.loc[flipped_inds,'kqz [1/A]'] = g_df.loc[flipped_inds,'kz [1/A]']\n",
    "    modified_g_df.loc[flipped_inds,'kx [1/A]'] = g_df.loc[flipped_inds,'kqx [1/A]']\n",
    "    modified_g_df.loc[flipped_inds,'ky [1/A]'] = g_df.loc[flipped_inds,'kqy [1/A]']\n",
    "    modified_g_df.loc[flipped_inds,'kz [1/A]'] = g_df.loc[flipped_inds,'kqz [1/A]']\n",
    "    \n",
    "    modified_g_df['k_pair_id'] = modified_g_df.groupby(['k_inds','k+q_inds']).ngroup()\n",
    "\n",
    "\n",
    "    reverse_df = modified_g_df.copy(deep=True)\n",
    "\n",
    "    reverse_df['k_inds'] = modified_g_df['k+q_inds']\n",
    "    reverse_df['k+q_inds'] = modified_g_df['k_inds']\n",
    "\n",
    "    reverse_df['k_FD'] = modified_g_df['k+q_FD']\n",
    "    reverse_df['k+q_FD'] = modified_g_df['k_FD']\n",
    "\n",
    "    reverse_df['k_en [eV]'] = modified_g_df['k+q_en [eV]']\n",
    "    reverse_df['k+q_en [eV]'] = modified_g_df['k_en [eV]']\n",
    "    \n",
    "    reverse_df['kqx [1/A]'] = modified_g_df['kx [1/A]']\n",
    "    reverse_df['kqy [1/A]'] = modified_g_df['ky [1/A]']\n",
    "    reverse_df['kqz [1/A]'] = modified_g_df['kz [1/A]']\n",
    "    reverse_df['kx [1/A]'] = modified_g_df['kqx [1/A]']\n",
    "    reverse_df['ky [1/A]'] = modified_g_df['kqy [1/A]']\n",
    "    reverse_df['kz [1/A]'] = modified_g_df['kqz [1/A]']\n",
    "\n",
    "    full_g_df = modified_g_df.append(reverse_df)\n",
    "    \n",
    "    full_g_df = gaussian_weight(full_g_df,b)\n",
    "\n",
    "    \n",
    "    return full_g_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "g_df = bosonic_processing(g_df,enq_df,T)\n",
    "g_df = fermionic_processing(g_df,cart_kpts_df,mu,T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_g_df = populate_reciprocals(g_df,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "del g_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_g_df = full_g_df[['k_inds', 'q_inds', 'k+q_inds', 'im_mode', 'g_element', 'q_id',\n",
    "       'q_en [eV]', 'BE', 'k_en [eV]', 'k+q_en [eV]',\n",
    "       'k_FD', 'k+q_FD', 'kx [1/A]', 'ky [1/A]', 'kz [1/A]', 'kqx [1/A]',\n",
    "       'kqy [1/A]', 'kqz [1/A]', 'k_pair_id','abs_gaussian','ems_gaussian']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question: Go over paper. The way I determine absorption vs emission is through energies of pre and post collision states. It's important to make this distinction because the weights in the summation are different. There are a number of states where the energy of the post-collision state is equivalent to that of the pre-collision state. I account for this by permitting both emission and absorption. Ask about magnitude of Boltzmann weights. Ask if Jin Jian accounts for population using the chemical potential in the Fermi-Dirac distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>k_inds</th>\n",
       "      <th>q_inds</th>\n",
       "      <th>k+q_inds</th>\n",
       "      <th>im_mode</th>\n",
       "      <th>g_element</th>\n",
       "      <th>q_id</th>\n",
       "      <th>q_en [eV]</th>\n",
       "      <th>BE</th>\n",
       "      <th>k_en [eV]</th>\n",
       "      <th>k+q_en [eV]</th>\n",
       "      <th>...</th>\n",
       "      <th>k+q_FD</th>\n",
       "      <th>kx [1/A]</th>\n",
       "      <th>ky [1/A]</th>\n",
       "      <th>kz [1/A]</th>\n",
       "      <th>kqx [1/A]</th>\n",
       "      <th>kqy [1/A]</th>\n",
       "      <th>kqz [1/A]</th>\n",
       "      <th>k_pair_id</th>\n",
       "      <th>abs_gaussian</th>\n",
       "      <th>ems_gaussian</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>6.279619e-20</td>\n",
       "      <td>1</td>\n",
       "      <td>0.033090</td>\n",
       "      <td>0.385195</td>\n",
       "      <td>6.065254</td>\n",
       "      <td>6.093535</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.011309</td>\n",
       "      <td>0.011309</td>\n",
       "      <td>-0.011309</td>\n",
       "      <td>0</td>\n",
       "      <td>49.134747</td>\n",
       "      <td>1.949553e-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1.016675e-02</td>\n",
       "      <td>2</td>\n",
       "      <td>0.035405</td>\n",
       "      <td>0.340956</td>\n",
       "      <td>6.065254</td>\n",
       "      <td>6.093535</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.011309</td>\n",
       "      <td>0.011309</td>\n",
       "      <td>-0.011309</td>\n",
       "      <td>0</td>\n",
       "      <td>31.909667</td>\n",
       "      <td>2.115260e-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>4</td>\n",
       "      <td>1.167235e-08</td>\n",
       "      <td>0</td>\n",
       "      <td>0.033090</td>\n",
       "      <td>0.385198</td>\n",
       "      <td>6.065254</td>\n",
       "      <td>6.093535</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.011309</td>\n",
       "      <td>-0.011309</td>\n",
       "      <td>0.011309</td>\n",
       "      <td>1</td>\n",
       "      <td>49.135806</td>\n",
       "      <td>1.950089e-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>5</td>\n",
       "      <td>3.516638e-20</td>\n",
       "      <td>1</td>\n",
       "      <td>0.033090</td>\n",
       "      <td>0.385195</td>\n",
       "      <td>6.065254</td>\n",
       "      <td>6.093535</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.011309</td>\n",
       "      <td>-0.011309</td>\n",
       "      <td>0.011309</td>\n",
       "      <td>1</td>\n",
       "      <td>49.134747</td>\n",
       "      <td>1.949553e-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>6</td>\n",
       "      <td>1.016675e-02</td>\n",
       "      <td>2</td>\n",
       "      <td>0.035405</td>\n",
       "      <td>0.340956</td>\n",
       "      <td>6.065254</td>\n",
       "      <td>6.093535</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.011309</td>\n",
       "      <td>-0.011309</td>\n",
       "      <td>0.011309</td>\n",
       "      <td>1</td>\n",
       "      <td>31.909667</td>\n",
       "      <td>2.115260e-26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   k_inds  q_inds  k+q_inds  im_mode     g_element  q_id  q_en [eV]        BE  \\\n",
       "0       1       1         2        5  6.279619e-20     1   0.033090  0.385195   \n",
       "1       1       1         2        6  1.016675e-02     2   0.035405  0.340956   \n",
       "2       1       1        26        4  1.167235e-08     0   0.033090  0.385198   \n",
       "3       1       1        26        5  3.516638e-20     1   0.033090  0.385195   \n",
       "4       1       1        26        6  1.016675e-02     2   0.035405  0.340956   \n",
       "\n",
       "   k_en [eV]  k+q_en [eV]  ...    k+q_FD  kx [1/A]  ky [1/A]  kz [1/A]  \\\n",
       "0   6.065254     6.093535  ...  0.000005       0.0       0.0       0.0   \n",
       "1   6.065254     6.093535  ...  0.000005       0.0       0.0       0.0   \n",
       "2   6.065254     6.093535  ...  0.000005       0.0       0.0       0.0   \n",
       "3   6.065254     6.093535  ...  0.000005       0.0       0.0       0.0   \n",
       "4   6.065254     6.093535  ...  0.000005       0.0       0.0       0.0   \n",
       "\n",
       "   kqx [1/A]  kqy [1/A]  kqz [1/A]  k_pair_id  abs_gaussian  ems_gaussian  \n",
       "0  -0.011309   0.011309  -0.011309          0     49.134747  1.949553e-24  \n",
       "1  -0.011309   0.011309  -0.011309          0     31.909667  2.115260e-26  \n",
       "2   0.011309  -0.011309   0.011309          1     49.135806  1.950089e-24  \n",
       "3   0.011309  -0.011309   0.011309          1     49.134747  1.949553e-24  \n",
       "4   0.011309  -0.011309   0.011309          1     31.909667  2.115260e-26  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full_g_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scattering_rate(g_df):\n",
    "    \"\"\"\n",
    "    This function takes a list of k-point indices and returns the Fermi-distributions and energies associated with each k-point on that list. The Fermi distributions are calculated with respect to a particular chemical potential.      \n",
    "    Parameters:\n",
    "    -----------\n",
    "    \n",
    "    abs_g_df : pandas dataframe containing:\n",
    "\n",
    "        k_inds : vector_like, shape (n,1)\n",
    "        Index of k point (pre-collision)\n",
    "        \n",
    "        q_inds : vector_like, shape (n,1)\n",
    "        Index of q point\n",
    "        \n",
    "        k+q_inds : vector_like, shape (n,1)\n",
    "        Index of k point (post-collision)\n",
    "        \n",
    "        m_band : vector_like, shape (n,1)\n",
    "        Band index of post-collision state\n",
    "        \n",
    "        n_band : vector_like, shape (n,1)\n",
    "        Band index of pre-collision state\n",
    "        \n",
    "        im_mode : vector_like, shape (n,1)\n",
    "        Polarization of phonon mode\n",
    "        \n",
    "        g_element : vector_like, shape (n,1)\n",
    "        E-ph matrix element\n",
    "        \n",
    "        k_fermi_dist : vector_like, shape (n,1)\n",
    "        Fermi distribution of pre collision state\n",
    "        \n",
    "        k+q_fermi_dist : vector_like, shape (n,1)\n",
    "        Fermi distribution of post collision state\n",
    "        \n",
    "        k_energy : vector_like, shape (n,1)\n",
    "        Energy of the pre collision state\n",
    "        \n",
    "        k+q_energy : vector_like, shape (n,1)\n",
    "        Energy of the post collision state\n",
    "        \n",
    "            \n",
    "    T : scalar\n",
    "    Lattice temperature in Kelvin\n",
    "    \n",
    "    Returns:\n",
    "    --------\n",
    "    \n",
    "    \n",
    "         \n",
    "    \"\"\"\n",
    "    \n",
    "    \n",
    "    # Physical constants\n",
    "    e = 1.602*10**(-19) # fundamental electronic charge [C]\n",
    "    kb = 1.38064852*10**(-23); # Boltzmann constant in SI [m^2 kg s^-2 K^-1]\n",
    "    h = 1.0545718*10**(-34)\n",
    "    \n",
    "    g_df['ems_weight'] = np.multiply(np.multiply(g_df['BE'].values + 1 - g_df['k+q_FD'].values,g_df['g_element'].values),g_df['ems_gaussian'])/13.6056980659\n",
    "    g_df['abs_weight'] = np.multiply(np.multiply((g_df['BE'].values + g_df['k+q_FD'].values),g_df['g_element'].values),g_df['abs_gaussian'])/13.6056980659\n",
    "    \n",
    "    g_df['weight'] = g_df['ems_weight'].values + g_df['abs_weight'].values\n",
    "    \n",
    "    \n",
    "    sr = g_df.groupby(['k_inds'])['weight'].agg('sum')*2*np.pi*2.418*10**(17)*10**(-12)/len(np.unique(g_df['q_id'].values))\n",
    "    scattering = sr.to_frame().reset_index()\n",
    "    \n",
    "\n",
    "    return scattering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "scattering = scattering_rate(full_g_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "scattering_array = np.zeros(len(np.unique(enk_df['k_inds'])))\n",
    "scattering_array[scattering['k_inds'].values-1] = scattering['weight'].values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question: Is this the right way of calculating the scattering rate? Just a naive sum and normalization by the number of phonons? Is there some weight that I'm missing? What's the reason for the deviation? There are obviously some convergence issues at low k-point magnitude."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.cm as cm\n",
    "plt.rcParams.update({'font.size': 40})\n",
    "plt.rcParams.update({'lines.linewidth': 3.5})\n",
    "\n",
    "fig = plt.figure(figsize=(12,10))\n",
    "ax = plt.gca()\n",
    "\n",
    "\n",
    "plt.scatter((enk_df['energy [Ryd]'].values-enk_df['energy [Ryd]'].min())*13.6056980659,(scattering_array),c = 'Red')\n",
    "#plt.ticklabel_format(style='sci', axis='y', scilimits=(0,0))\n",
    "#plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))\n",
    "plt.ylabel('Scattering Rate [1/ps]')\n",
    "plt.xlabel('Energy [eV]')\n",
    "#plt.legend()\n",
    "plt.ylim((-0.1,20.1))\n",
    "plt.show()\n",
    "fig.savefig('test.png', bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2213"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(scattering_array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15709216"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(full_g_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9922069949257811"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum(full_g_df['k_en [eV]'] > (full_g_df['k_en [eV]'].min()+ 0.25))/len(full_g_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def coupling_matrix_calc(g_df):\n",
    "    \"\"\"\n",
    "    This function takes a list of k-point indices and returns the Fermi-distributions and energies associated with each k-point on that list. The Fermi distributions are calculated with respect to a particular chemical potential.      \n",
    "    Parameters:\n",
    "    -----------\n",
    "    \n",
    "    abs_g_df : pandas dataframe containing:\n",
    "\n",
    "        k_inds : vector_like, shape (n,1)\n",
    "        Index of k point (pre-collision)\n",
    "        \n",
    "        q_inds : vector_like, shape (n,1)\n",
    "        Index of q point\n",
    "        \n",
    "        k+q_inds : vector_like, shape (n,1)\n",
    "        Index of k point (post-collision)\n",
    "        \n",
    "        m_band : vector_like, shape (n,1)\n",
    "        Band index of post-collision state\n",
    "        \n",
    "        n_band : vector_like, shape (n,1)\n",
    "        Band index of pre-collision state\n",
    "        \n",
    "        im_mode : vector_like, shape (n,1)\n",
    "        Polarization of phonon mode\n",
    "        \n",
    "        g_element : vector_like, shape (n,1)\n",
    "        E-ph matrix element\n",
    "        \n",
    "        k_fermi_dist : vector_like, shape (n,1)\n",
    "        Fermi distribution of pre collision state\n",
    "        \n",
    "        k+q_fermi_dist : vector_like, shape (n,1)\n",
    "        Fermi distribution of post collision state\n",
    "        \n",
    "        k_energy : vector_like, shape (n,1)\n",
    "        Energy of the pre collision state\n",
    "        \n",
    "        k+q_energy : vector_like, shape (n,1)\n",
    "        Energy of the post collision state\n",
    "        \n",
    "            \n",
    "    T : scalar\n",
    "    Lattice temperature in Kelvin\n",
    "    \n",
    "    Returns:\n",
    "    --------\n",
    "    \n",
    "    \n",
    "         \n",
    "    \"\"\"\n",
    "    \n",
    "    \n",
    "    # Physical constants\n",
    "    e = 1.602*10**(-19) # fundamental electronic charge [C]\n",
    "    kb = 1.38064852*10**(-23); # Boltzmann constant in SI [m^2 kg s^-2 K^-1]\n",
    "    h = 1.0545718*10**(-34)\n",
    "    \n",
    "    g_df_ems = g_df.loc[(g_df['collision_state'] == -1)].copy(deep=True)\n",
    "    g_df_abs = g_df.loc[(g_df['collision_state'] == 1)].copy(deep=True)\n",
    "    \n",
    "    g_df_ems['weight'] = np.multiply(np.multiply((g_df_ems['BE'].values + 1 - g_df_ems['k+q_FD'].values),g_df_ems['g_element'].values),g_df_ems['gaussian'])/13.6056980659\n",
    "    g_df_abs['weight'] = np.multiply(np.multiply((g_df_abs['BE'].values + g_df_abs['k+q_FD'].values),g_df_abs['g_element'].values),g_df_abs['gaussian'])/13.6056980659 \n",
    "    \n",
    "    abs_sr = g_df_abs.groupby(['k_inds', 'k+q_inds'])['weight'].agg('sum')\n",
    "    summed_abs_df = abs_sr.to_frame().reset_index()\n",
    "    \n",
    "    ems_sr = g_df_ems.groupby(['k_inds', 'k+q_inds'])['weight'].agg('sum')\n",
    "    summed_ems_df = ems_sr.to_frame().reset_index()\n",
    "    \n",
    "    return summed_abs_df,summed_ems_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cartesian_q_points(qpts_df):\n",
    "    \"\"\"\n",
    "    Given a dataframe containing indexed q-points in terms of the crystal lattice vector, return the dataframe with cartesian q coordinates.     \n",
    "    Parameters:\n",
    "    -----------\n",
    "    qpts_df : pandas dataframe containing:\n",
    "        \n",
    "        q_inds : vector_like, shape (n,1)\n",
    "        Index of q point\n",
    "        \n",
    "        kx : vector_like, shape (n,1)\n",
    "        x-coordinate in momentum space [1/A]    \n",
    "        \n",
    "        ky : vector_like, shape (n,1)\n",
    "        y-coordinate in momentum space [1/A]  \n",
    "        \n",
    "        kz : vector_like, shape (n,1)\n",
    "        z-coordinate in momentum space [1/A]\n",
    "        \n",
    "    For FCC lattice, use the momentum space primitive vectors as per:\n",
    "    http://lampx.tugraz.at/~hadley/ss1/bzones/fcc.php\n",
    "    \n",
    "    b1 = 2 pi/a (kx - ky + kz)\n",
    "    b2 = 2 pi/a (kx + ky - kz)\n",
    "    b3 = 2 pi/a (-kx + ky + kz)\n",
    "    \n",
    "    Returns:\n",
    "    --------\n",
    "    cart_kpts_df : pandas dataframe containing:\n",
    "    \n",
    "        q_inds : vector_like, shape (n,1)\n",
    "        Index of q point\n",
    "        \n",
    "        kx : vector_like, shape (n,1)\n",
    "        x-coordinate in Cartesian momentum space [1/m]    \n",
    "        \n",
    "        ky : vector_like, shape (n,1)\n",
    "        y-coordinate in Cartesian momentum space [1/m]  \n",
    "        \n",
    "        kz : vector_like, shape (n,1)\n",
    "        z-coordinate in Cartesian momentum space [1/m]  \n",
    "    \"\"\"\n",
    "    \n",
    "    # Need a lattice constant for GaAs. This is obviously somewhat sensitive to temperature.\n",
    "    a = 5.556 #[A]\n",
    "    \n",
    "    cartesian_df = pd.DataFrame(columns = ['q_inds','kx [1/A]','ky [1/A]','kz [1/A]'])\n",
    "    \n",
    "    con1 = pd.DataFrame(columns = ['kx [1/A]','ky [1/A]','kz [1/A]'])\n",
    "    con1['kx [1/A]'] = np.ones(len(qpts_df))*-1\n",
    "    con1['ky [1/A]'] = np.ones(len(qpts_df))*-1\n",
    "    con1['kz [1/A]'] = np.ones(len(qpts_df))*1\n",
    "\n",
    "    con2 = con1.copy(deep=True)\n",
    "    con2['kx [1/A]'] = con2['kx [1/A]'].values*-1\n",
    "    con2['ky [1/A]'] = con2['ky [1/A]'].values*-1\n",
    "\n",
    "    con3 = con1.copy(deep=True)\n",
    "    con3['ky [1/A]'] = con2['ky [1/A]'].values\n",
    "    con3['kz [1/A]'] = con3['kz [1/A]'].values*-1\n",
    "    \n",
    "    \n",
    "    cartesian_df['kx [1/A]'] = np.multiply(qpts_df['b1'].values,(con1['kx [1/A]'].values)) + np.multiply(qpts_df['b2'].values,(con2['kx [1/A]'].values)) + np.multiply(qpts_df['b3'].values,(con3['kx [1/A]'].values))\n",
    "    cartesian_df['ky [1/A]'] = np.multiply(qpts_df['b1'].values,(con1['ky [1/A]'].values)) + np.multiply(qpts_df['b2'].values,(con2['ky [1/A]'].values)) + np.multiply(qpts_df['b3'].values,(con3['ky [1/A]'].values))\n",
    "    cartesian_df['kz [1/A]'] = np.multiply(qpts_df['b1'].values,(con1['kz [1/A]'].values)) + np.multiply(qpts_df['b2'].values,(con2['kz [1/A]'].values)) + np.multiply(qpts_df['b3'].values,(con3['kz [1/A]'].values))\n",
    "\n",
    "    cartesian_df['q_inds'] = qpts_df['q_inds'].values\n",
    "    \n",
    "    cartesian_df_edit = cartesian_df.copy(deep=True)\n",
    "\n",
    "    qx_plus = cartesian_df['kx [1/A]'] > 0.5\n",
    "    qx_minus = cartesian_df['kx [1/A]'] < -0.5\n",
    "\n",
    "    qy_plus = cartesian_df['ky [1/A]'] > 0.5\n",
    "    qy_minus = cartesian_df['ky [1/A]'] < -0.5\n",
    "\n",
    "    qz_plus = cartesian_df['kz [1/A]'] > 0.5\n",
    "    qz_minus = cartesian_df['kz [1/A]'] < -0.5\n",
    "\n",
    "    cartesian_df_edit.loc[qx_plus,'kx [1/A]'] = cartesian_df.loc[qx_plus,'kx [1/A]'] -1\n",
    "    cartesian_df_edit.loc[qx_minus,'kx [1/A]'] = cartesian_df.loc[qx_minus,'kx [1/A]'] +1\n",
    "\n",
    "    cartesian_df_edit.loc[qy_plus,'ky [1/A]'] = cartesian_df.loc[qy_plus,'ky [1/A]'] -1\n",
    "    cartesian_df_edit.loc[qy_minus,'ky [1/A]'] = cartesian_df.loc[qy_minus,'ky [1/A]'] +1\n",
    "\n",
    "    cartesian_df_edit.loc[qz_plus,'kz [1/A]'] = cartesian_df.loc[qz_plus,'kz [1/A]'] -1\n",
    "    cartesian_df_edit.loc[qz_minus,'kz [1/A]'] = cartesian_df.loc[qz_minus,'kz [1/A]'] +1\n",
    "    \n",
    "    return cartesian_df,cartesian_df_edit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cart_qpts_df,edit_cart_qpts_df = cartesian_q_points(qpts_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data validation (Peishi Updated: 4/30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_bandstructure(kpts, enk): \n",
    "    '''Plots electron bandstructure. \n",
    "    \n",
    "    Path is hardcoded for FCC unit cell. Currently just plotting Gamma-L and Gamma-X \n",
    "    \n",
    "    Parameters: \n",
    "    ------------ \n",
    "    kpts : dataframe containing \n",
    "        k_inds : vector_like, shape (n,1) \n",
    "        Index of k point \n",
    "\n",
    "        'kx [1/A]' : vector_like, shape (n,1) \n",
    "        x-coordinate in Cartesian momentum space     \n",
    "\n",
    "        'ky [1/A]' : vector_like, shape (n,1) \n",
    "        y-coordinate in Cartesian momentum space \n",
    "\n",
    "        'kz [1/A]' : vector_like, shape (n,1) \n",
    "        z-coordinate in Cartesian momentum space \n",
    "\n",
    "    enk : dataframe containing \n",
    "        k_inds : vector_like, shape (n,1) \n",
    "        Index of k point \n",
    "\n",
    "        band_inds : vector_like, shape (n,1) \n",
    "        Band index \n",
    "\n",
    "        energy [Ryd] : vector_like, shape (n,1) \n",
    "        Energy associated with k point in Rydberg units \n",
    "\n",
    "    Returns: \n",
    "    --------- \n",
    "    No variable returns. Just plots the dispersion  \n",
    "    '''\n",
    "    \n",
    "    # Lattice constant and reciprocal lattice vectors \n",
    "    # b1 = 2 pi/a (kx - ky + kz) \n",
    "    # b2 = 2 pi/a (kx + ky - kz) \n",
    "    # b3 = 2 pi/a (-kx + ky + kz) \n",
    "    a = 5.556 #[A] \n",
    "    b1 = (2*np.pi/a) * np.array([1, -1, 1]) \n",
    "    b2 = (2*np.pi/a) * np.array([1, 1, -1]) \n",
    "    b3 = (2*np.pi/a) * np.array([-1, 1, 1]) \n",
    "\n",
    "    # L point in BZ is given by 0.5*b1 + 0.5*b2 + 0.5*b3 \n",
    "    # X point in BZ is given by 0.5*b2 + 0.5*b3 \n",
    "    lpoint = 0.5 * (b1 + b2 + b3) \n",
    "    xpoint = 0.5 * (b2 + b3) \n",
    "\n",
    "    # We can find kpoints along a path just by considering a dot product with lpoint and xpoint vectors. \n",
    "    # Any kpoints with angle smaller than some tolerance are considered on the path and we can plot their corresponding frequencies \n",
    "    deg2rad = 2*np.pi/360 \n",
    "    ang_tol = 1 * deg2rad  # 1 degree in radians \n",
    "\n",
    "    enkonly = np.array(enk['energy [Ryd]'])[:, np.newaxis] \n",
    "    enkinds = np.array(enk['k_inds'])\n",
    "    kptsonly = np.array(kpts[['kx [1/A]', 'ky [1/A]', 'kz [1/A]']]) / (2*np.pi/a) \n",
    "    kptsinds = np.array(kpts['k_inds'])\n",
    "    kptsmag = np.linalg.norm(kptsonly, axis=1)[:, np.newaxis] \n",
    "\n",
    "    dot_l = np.zeros(len(kpts))\n",
    "    dot_x = np.zeros(len(kpts))\n",
    "\n",
    "    # Separate assignment for gamma point to avoid divide by zero error\n",
    "    nongamma = kptsmag!=0\n",
    "    dot_l[np.squeeze(nongamma)] = np.divide(np.dot(kptsonly, lpoint[:, np.newaxis])[nongamma], kptsmag[nongamma]) / np.linalg.norm(lpoint) \n",
    "    dot_x[np.squeeze(nongamma)] = np.divide(np.dot(kptsonly, xpoint[:, np.newaxis])[nongamma], kptsmag[nongamma]) / np.linalg.norm(xpoint) \n",
    "    dot_l[np.squeeze(kptsmag==0)] = 0 \n",
    "    dot_x[np.squeeze(kptsmag==0)] = 0 \n",
    "\n",
    "    lpath = np.logical_or(np.arccos(dot_l) < ang_tol, np.squeeze(kptsmag == 0))\n",
    "    xpath = np.logical_or(np.arccos(dot_x) < ang_tol, np.squeeze(kptsmag == 0))\n",
    "    \n",
    "    linds = kptsinds[lpath]\n",
    "    xinds = kptsinds[xpath]\n",
    "    lkmag = kptsmag[lpath]\n",
    "    xkmag = kptsmag[xpath]\n",
    "\n",
    "    plt.figure() \n",
    "    \n",
    "    for i, ki in enumerate(linds):\n",
    "        energies = enkonly[enkinds == ki, 0]\n",
    "        thiskmag = lkmag[i]\n",
    "        if len(energies) > 1:\n",
    "            veck = np.ones((len(energies), 1)) * thiskmag\n",
    "            plt.plot(veck, theseenergies, '.', color='C0')\n",
    "        else:\n",
    "            plt.plot(thiskmag,energies, '.', color='C0')\n",
    "    \n",
    "    for i, ki in enumerate(xinds):\n",
    "        energies = enkonly[enkinds == ki, 0]\n",
    "        thiskmag = lkmag[i]\n",
    "        if len(energies) > 1:\n",
    "            veck = np.ones((len(energies), 1)) * thiskmag\n",
    "            plt.plot(-1*veck, energies, '.', color='C1')\n",
    "        else:\n",
    "            plt.plot(-1*thiskmag,energies, '.', color='C1')\n",
    "        \n",
    "    plt.xlabel('k magnitude') \n",
    "    plt.ylabel('Energy in Ry')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_bandstructure(cart_kpts_df, enk_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_dispersion(kpts, enk): \n",
    "    '''Plots electron bandstructure. \n",
    "    \n",
    "    Path is hardcoded for FCC unit cell. Currently just plotting Gamma-L and Gamma-X \n",
    "    \n",
    "    Parameters: \n",
    "    ------------ \n",
    "    kpts : dataframe containing \n",
    "        k_inds : vector_like, shape (n,1) \n",
    "        Index of k point \n",
    "\n",
    "        'kx [1/A]' : vector_like, shape (n,1) \n",
    "        x-coordinate in Cartesian momentum space     \n",
    "\n",
    "        'ky [1/A]' : vector_like, shape (n,1) \n",
    "        y-coordinate in Cartesian momentum space \n",
    "\n",
    "        'kz [1/A]' : vector_like, shape (n,1) \n",
    "        z-coordinate in Cartesian momentum space \n",
    "\n",
    "    enk : dataframe containing \n",
    "        k_inds : vector_like, shape (n,1) \n",
    "        Index of k point \n",
    "\n",
    "        band_inds : vector_like, shape (n,1) \n",
    "        Band index \n",
    "\n",
    "        energy [Ryd] : vector_like, shape (n,1) \n",
    "        Energy associated with k point in Rydberg units \n",
    "\n",
    "    Returns: \n",
    "    --------- \n",
    "    No variable returns. Just plots the dispersion  \n",
    "    '''\n",
    "    \n",
    "    # Lattice constant and reciprocal lattice vectors \n",
    "    # b1 = 2 pi/a (kx - ky + kz) \n",
    "    # b2 = 2 pi/a (kx + ky - kz) \n",
    "    # b3 = 2 pi/a (-kx + ky + kz) \n",
    "    a = 5.556 #[A] \n",
    "    b1 = (2*np.pi/a) * np.array([1, -1, 1]) \n",
    "    b2 = (2*np.pi/a) * np.array([1, 1, -1]) \n",
    "    b3 = (2*np.pi/a) * np.array([-1, 1, 1]) \n",
    "\n",
    "    # L point in BZ is given by 0.5*b1 + 0.5*b2 + 0.5*b3 \n",
    "    # X point in BZ is given by 0.5*b2 + 0.5*b3 \n",
    "    lpoint = 0.5 * (b1 + b2 + b3) \n",
    "    xpoint = 0.5 * (b2 + b3) \n",
    "\n",
    "    # We can find kpoints along a path just by considering a dot product with lpoint and xpoint vectors. \n",
    "    # Any kpoints with angle smaller than some tolerance are considered on the path and we can plot their corresponding frequencies \n",
    "    deg2rad = 2*np.pi/360 \n",
    "    ang_tol = 1 * deg2rad  # 1 degree in radians \n",
    "\n",
    "    print(list(kpts))\n",
    "    \n",
    "    enkonly = np.array(enk['energy [Ryd]'])[:, np.newaxis] \n",
    "    enkinds = np.array(enk['q_inds'])\n",
    "    kptsonly = np.array(kpts[['kx [1/A]', 'ky [1/A]', 'kz [1/A]']]) / (2*np.pi/a) \n",
    "    kptsinds = np.array(kpts['q_inds'])\n",
    "    kptsmag = np.linalg.norm(kptsonly, axis=1)[:, np.newaxis] \n",
    "\n",
    "    dot_l = np.zeros(len(kpts))\n",
    "    dot_x = np.zeros(len(kpts))\n",
    "\n",
    "    # Separate assignment for gamma point to avoid divide by zero error\n",
    "    nongamma = kptsmag!=0\n",
    "    dot_l[np.squeeze(nongamma)] = np.divide(np.dot(kptsonly, lpoint[:, np.newaxis])[nongamma], kptsmag[nongamma]) / np.linalg.norm(lpoint) \n",
    "    dot_x[np.squeeze(nongamma)] = np.divide(np.dot(kptsonly, xpoint[:, np.newaxis])[nongamma], kptsmag[nongamma]) / np.linalg.norm(xpoint) \n",
    "    dot_l[np.squeeze(kptsmag==0)] = 0 \n",
    "    dot_x[np.squeeze(kptsmag==0)] = 0 \n",
    "\n",
    "    lpath = np.logical_or(np.arccos(dot_l) < ang_tol, np.squeeze(kptsmag == 0))\n",
    "    xpath = np.logical_or(np.arccos(dot_x) < ang_tol, np.squeeze(kptsmag == 0))\n",
    "    \n",
    "    linds = kptsinds[lpath]\n",
    "    xinds = kptsinds[xpath]\n",
    "    lkmag = kptsmag[lpath]\n",
    "    xkmag = kptsmag[xpath]\n",
    "\n",
    "    plt.figure() \n",
    "    \n",
    "    for i, ki in enumerate(linds):\n",
    "        energies = enkonly[enkinds == ki, 0]\n",
    "        thiskmag = lkmag[i]\n",
    "        if len(energies) > 1:\n",
    "            veck = np.ones((len(energies), 1)) * thiskmag\n",
    "            plt.plot(veck, energies, '.', color='C0')\n",
    "        else:\n",
    "            plt.plot(thiskmag,energies, '.', color='C0')\n",
    "    \n",
    "    for i, ki in enumerate(xinds):\n",
    "        energies = enkonly[enkinds == ki, 0]\n",
    "        thiskmag = lkmag[i]\n",
    "        if len(energies) > 1:\n",
    "            veck = np.ones((len(energies), 1)) * thiskmag\n",
    "            plt.plot(-1*veck, energies, '.', color='C1')\n",
    "        else:\n",
    "            plt.plot(-1*thiskmag,energies, '.', color='C1')\n",
    "        \n",
    "    plt.xlabel('k magnitude') \n",
    "    plt.ylabel('Energy in Ry')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# kpts = edit_cart_qpts_df\n",
    "# enk = enq_df\n",
    "plot_dispersion(edit_cart_qpts_df, enq_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
